@page "/"
@inject HttpClient Http
@inject ApiKey fmpApiKey
@using BlazorApp1.Shared.Data

<PageTitle>IDPA Aktienanalyse</PageTitle>

<style>
    body {
        margin: 0;
        min-height: 100vh;
        background: #fafafa;
        padding: 0;
        align-items: center;
        justify-content: center;
    }
</style>

<div class="hero">
    <div class="container_bg">
        <h1 style="font-weight: bold;">IDPA - Analyzing stocks simplified</h1>
        <h2 style="color: var(--signature-yellow)">BM 2023</h2>
        <p style="font-style: italic;">Authors: Vincent Kilian Wittlin & Ernest Schaffner</p>
    </div>
</div>

<div class="container_bg mt-5">
    <h2>Information - IDPA</h2>
    <hr />
    <h4>Abstract</h4>
    <p>The purpose of this project is, on the one hand, the creation, management and theoretical marketing of a responsive web application. This should allow us and our end users to obtain all information about listed companies. On the other hand, we want to document a comprehensive report about the history of the stock market as well as its events and debates.</p>    <br />
    <p>"IDPA" is the German word for an interdisciplinary project. "BM" is the German term for a vocational baccalaureate. You will certainly come across these terms a few times on this website.</p>
    <h4>Report on the history of the stock market</h4>
    <p>You can visit our report <a target="_blank" style="color:blue" href="https://bbzsolothurngrenchen-my.sharepoint.com/:b:/g/personal/vincentkilian_wittlin_bbzsogr_ch/ERD3qY1zciBAjIyv-49DYYkB_V8JsaAqw87pxwDfIN3Nog?e=HaN4oX">here</a>, but only if you have a BBZSOGR E-Mail account.</p>
</div>

<div>
@if (gainers == null || losers == null || sectorPerformances == null)
{
} else {
<div class="container_bg mt-5">
    <h2>Market</h2>
    <hr />
</div>
<div class="container m-cont">
    <div class="row m-row">
        <div class="col-xl-6 text-center">
            <div class="m-col-c">
                <h5>Sector Performance</h5>
                <hr />
                <Virtualize Items="sectorPerformances" Context="performance">
                    <p>
                        <span style="font-weight: bold;@StyleNegativePositive(performance.changesPercentage)" class=""><i class="fa-solid @GetNegativePositiveIcon(performance.changesPercentage)"></i></span>
                        <span style="font-weight: bold;@StyleNegativePositive(performance.changesPercentage)" class="">@performance.parsedDouble.ToString("0.##")%</span>
                        <span style="font-weight: bold;" class="">@performance.sector</span>
                    </p>
                </Virtualize>
            </div>
        </div>
        <div class="col-xl-6 text-center">
            <div class="m-col-c">
                <h5>Top Gainers</h5>
                <hr />
                <div class="container">
                    @for (var i = 0; i < 6; i++)
                    {
                        <p>
                            <span class="gainer-icon"><i class="fa-solid fa-up-long"></i></span>
                            <span class="gainer-percentage">@gainers[i].changesPercentage.ToString("#.#") %</span>
                            <span class="gainer-ticker"><a href="@($"/stock/{gainers[i].symbol}")">@gainers[i].symbol</a></span>
                        </p>
                    }
                </div>
            </div>
            <div class="m-col-c">
                <h5>Top Losers</h5>
                <hr />
                <div class="container">
                    @for (var i = 0; i < 6; i++)
                    {
                        <p>
                            <span class="loser-icon"><i class="fa-solid fa-down-long"></i></span>
                            <span class="loser-percentage">@losers[i].changesPercentage.ToString("#.#") %</span>
                            <span class="loser-ticker"><a href="@($"/stock/{losers[i].symbol}")">@losers[i].symbol</a></span>
                        </p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
}
</div>


@if (articles == null) {
} else {
    <div class="container_bg">
        <h2>Articles</h2>
        <hr />
    </div>
    <div class="container nuijafz">
        <div class="row">
        <Virtualize Items="articles.content" Context="article">
            <a href="@article.link" target="_blank">
            <div style="background: linear-gradient(to bottom, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.8) ), url('@article.image');background-size: cover;color: white;padding-top: 6rem;padding-bottom: 6rem;" class="col-xl-12 hero-article cont-art">
                <div class="container_bg-article">
                    <h2>@article.title</h2>
                    <h5 style="color: var(--signature-yellow);">@article.site | by @article.author</h5>
                </div>
            </div>
            </a>
        </Virtualize>
        </div>
    </div>
}

@code {
    private GainerList[]? gainers;
    private LoserList[]? losers;
    private SectorPerformanceList[]? sectorPerformances;
    private ArticleContent? articles;

    protected override async Task OnInitializedAsync()
    {
        gainers = await Http.GetFromJsonAsync<GainerList[]>("stock_market/gainers?apikey=" + fmpApiKey.myApiKey);
        losers = await Http.GetFromJsonAsync<LoserList[]>("stock_market/losers?apikey=" + fmpApiKey.myApiKey);
        sectorPerformances = await Http.GetFromJsonAsync<SectorPerformanceList[]>("sector-performance?apikey=" + fmpApiKey.myApiKey);
        articles = await Http.GetFromJsonAsync<ArticleContent>("fmp/articles?apikey=" + fmpApiKey.myApiKey);
    }

    public partial class ArticleContent : Content
    {
        public int? size { get; set; }
        public Content[]? content { get; set; }

    }

    public class Content
    {
        public string? title { get; set; }
        public string? date { get; set; }
        public string? content { get; set; }
        public string? image { get; set; }
        public string? link { get; set; }
        public string? author { get; set; }
        public string? site { get; set; }
    }

    public class GainerList
    {
        public string? symbol { get; set; }
        public string? name { get; set; }
        public float? change { get; set; }
        public float? price { get; set; }
        public float changesPercentage { get; set; }
    }

    public class LoserList
    {
        public string? symbol { get; set; }
        public string? name { get; set; }
        public float? change { get; set; }
        public float? price { get; set; }
        public float changesPercentage { get; set; }
    }

    public class SectorPerformanceList
    {
        public string? sector { get; set; }
        public string? changesPercentage { get; set; }
        char[] charsToTrim = { '%' };
        public string cleanString => changesPercentage.Trim(charsToTrim);
        public float parsedDouble => float.Parse(cleanString, System.Globalization.CultureInfo.InvariantCulture);
    }

    private string StyleNegativePositive(string percCh)
    {
        if (percCh.StartsWith("-")) { return "color:red;"; } else { return "color: green;"; }
    }

    private string GetNegativePositiveIcon(string percCh)
    {
        if (percCh.StartsWith("-")) { return "fa-down-long"; } else { return "fa-up-long"; }
    }
}
