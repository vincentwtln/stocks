@page "/stock/{ticker}"
@using BlazorApp1.Shared.Data
@inject HttpClient Http
@inject ApiKey fmpApiKey

<style>
    body {
        margin: 0;
        min-height: 100vh;
        background: #fafafa;
        padding: 0;
        align-items: center;
        justify-content: center;
    }
</style>

<PageTitle>@ticker - IDPA Aktienanalyse</PageTitle>

@if (profiles == null || ratings == null || stockprices == null || reports == null || forecasts == null)
{
    <div class="container-fluid" style="width: 80%;">
        <p><em>Loading...</em></p>
    </div>
}
else
{
    <div class="body-containerwidth container-fluid justify-content-center align-items-center">
        <div class="container-fluid container-1 justify-content-center align-items-center">
            <div class="row">
                <div class="col-xl-6">
                    <div class="container-fluid">
                        <div class="row container-2 d-flex justify-content-center align-items-center">
                            <div class="col-xl-2">
                                <div class="comp-img d-flex justify-content-center align-items-center">
                                    <img src="@profiles.First().image" alt="Company Logo" width="90" />
                                </div>
                            </div>
                            <div class="col-xl-10 center-titlename d-flex align-middle text-center">
                                <div class="comp-name d-flex justify-content-center align-items-center align-middle">
                                    @profiles.First().companyName (@reports.First().symbol)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-xl-12 center-price">
                                <div class="ionawdpo">
                                    <h2 style="@StyleForNumber(@reports.First().dcf,@stockprices.First().price);font-weight:bold">@stockprices.First().price.ToString("N2")</h2>
                                    <h5 style="@StyleForNumber(@reports.First().dcf,@stockprices.First().price);font-weight:bold">@profiles.First().currency</h5>
                                </div>
                                <hr />
                            </div>
                        </div>
                        <div class="row custom-text-alignment">
                            <div class="col-xl-6">
                                <div class="d-flex justify-content-center align-items-center">
                                    <ol class="check-list">
                                        <li>
                                            <svg class="svg-icon" viewBox="0 0 20 20">
                                                <path fill="none" d="M11.611,10.049l-4.76-4.873c-0.303-0.31-0.297-0.804,0.012-1.105c0.309-0.304,0.803-0.293,1.105,0.012l5.306,5.433c0.304,0.31,0.296,0.805-0.012,1.105L7.83,15.928c-0.152,0.148-0.35,0.223-0.547,0.223c-0.203,0-0.406-0.08-0.559-0.236c-0.303-0.309-0.295-0.803,0.012-1.104L11.611,10.049z"></path>
                                            </svg>
                                            DCF: @reports.First().dcf.ToString("n2") @profiles.First().currency
                                        </li>
                                        <li>
                                            <svg class="svg-icon" viewBox="0 0 20 20">
                                                <path fill="none" d="M11.611,10.049l-4.76-4.873c-0.303-0.31-0.297-0.804,0.012-1.105c0.309-0.304,0.803-0.293,1.105,0.012l5.306,5.433c0.304,0.31,0.296,0.805-0.012,1.105L7.83,15.928c-0.152,0.148-0.35,0.223-0.547,0.223c-0.203,0-0.406-0.08-0.559-0.236c-0.303-0.309-0.295-0.803,0.012-1.104L11.611,10.049z"></path>
                                            </svg>
                                            Rating: @ratings.First().ratingRecommendation (Score: @ratings.First().ratingScore)
                                        </li>
                                        <li>
                                            <svg class="svg-icon" viewBox="0 0 20 20">
                                                <path fill="none" d="M11.611,10.049l-4.76-4.873c-0.303-0.31-0.297-0.804,0.012-1.105c0.309-0.304,0.803-0.293,1.105,0.012l5.306,5.433c0.304,0.31,0.296,0.805-0.012,1.105L7.83,15.928c-0.152,0.148-0.35,0.223-0.547,0.223c-0.203,0-0.406-0.08-0.559-0.236c-0.303-0.309-0.295-0.803,0.012-1.104L11.611,10.049z"></path>
                                            </svg>
                                            Market Cap: @stockprices.First().marketCap.ToString("n2") @profiles.First().currency
                                        </li>
                                        <li>
                                            <svg class="svg-icon" viewBox="0 0 20 20">
                                                <path fill="none" d="M11.611,10.049l-4.76-4.873c-0.303-0.31-0.297-0.804,0.012-1.105c0.309-0.304,0.803-0.293,1.105,0.012l5.306,5.433c0.304,0.31,0.296,0.805-0.012,1.105L7.83,15.928c-0.152,0.148-0.35,0.223-0.547,0.223c-0.203,0-0.406-0.08-0.559-0.236c-0.303-0.309-0.295-0.803,0.012-1.104L11.611,10.049z"></path>
                                            </svg>
                                            Volume: @stockprices.First().volume.ToString("n2")
                                        </li>
                                    </ol>
                                </div>
                            </div>

                            <div class="col-xl-6">
                                <div class="d-flex justify-content-center align-items-center">
                                    <ol class="check-list">
                                        <li>
                                            <svg class="svg-icon" viewBox="0 0 20 20">
                                                <path fill="none" d="M11.611,10.049l-4.76-4.873c-0.303-0.31-0.297-0.804,0.012-1.105c0.309-0.304,0.803-0.293,1.105,0.012l5.306,5.433c0.304,0.31,0.296,0.805-0.012,1.105L7.83,15.928c-0.152,0.148-0.35,0.223-0.547,0.223c-0.203,0-0.406-0.08-0.559-0.236c-0.303-0.309-0.295-0.803,0.012-1.104L11.611,10.049z"></path>
                                            </svg>
                                            EPS: @stockprices.First().eps.ToString("f2")
                                        </li>
                                        <li>
                                            <svg class="svg-icon" viewBox="0 0 20 20">
                                                <path fill="none" d="M11.611,10.049l-4.76-4.873c-0.303-0.31-0.297-0.804,0.012-1.105c0.309-0.304,0.803-0.293,1.105,0.012l5.306,5.433c0.304,0.31,0.296,0.805-0.012,1.105L7.83,15.928c-0.152,0.148-0.35,0.223-0.547,0.223c-0.203,0-0.406-0.08-0.559-0.236c-0.303-0.309-0.295-0.803,0.012-1.104L11.611,10.049z"></path>
                                            </svg>
                                            PE: @stockprices.First().pe.ToString()
                                        </li>
                                        <li>
                                            <svg class="svg-icon" viewBox="0 0 20 20">
                                                <path fill="none" d="M11.611,10.049l-4.76-4.873c-0.303-0.31-0.297-0.804,0.012-1.105c0.309-0.304,0.803-0.293,1.105,0.012l5.306,5.433c0.304,0.31,0.296,0.805-0.012,1.105L7.83,15.928c-0.152,0.148-0.35,0.223-0.547,0.223c-0.203,0-0.406-0.08-0.559-0.236c-0.303-0.309-0.295-0.803,0.012-1.104L11.611,10.049z"></path>
                                            </svg>
                                            Shares Outstanding: @stockprices.First().sharesOutstanding.ToString("n2")
                                        </li>
                                        <li>
                                            <svg class="svg-icon" viewBox="0 0 20 20">
                                                <path fill="none" d="M11.611,10.049l-4.76-4.873c-0.303-0.31-0.297-0.804,0.012-1.105c0.309-0.304,0.803-0.293,1.105,0.012l5.306,5.433c0.304,0.31,0.296,0.805-0.012,1.105L7.83,15.928c-0.152,0.148-0.35,0.223-0.547,0.223c-0.203,0-0.406-0.08-0.559-0.236c-0.303-0.309-0.295-0.803,0.012-1.104L11.611,10.049z"></path>
                                            </svg>
                                            Exchange: @stockprices.First().exchange
                                        </li>
                                    </ol>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xl-6">
                    <div class="d-flex justify-content-center align-items-center">
                        <SfChart Title="Price Chart" Width="100%" Height="100%" Background="#fafafa">
                            <ChartPrimaryXAxis IntervalType="IntervalType.Auto" ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime"></ChartPrimaryXAxis>
                            <ChartPrimaryYAxis LabelFormat="c" />
                            <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                            <ChartZoomSettings EnableMouseWheelZooming="true" EnablePinchZooming="true" EnableSelectionZooming="true"></ChartZoomSettings>
                            <ChartCrosshairSettings Enable="true"></ChartCrosshairSettings>
                            <ChartSeriesCollection>
                                <ChartSeries DataSource="@forecasts.Historical" XName="date" YName="close" Type="ChartSeriesType.Line" Fill="#003566"></ChartSeries>
                            </ChartSeriesCollection>
                        </SfChart>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <br />
    <DetailTabsComponent tickerName="@ticker"></DetailTabsComponent>
}

@code {
    [Parameter]
    public string? ticker { get; set; }
    private int timeseries = 365;

    private Profile[]? profiles;
    private Report[]? reports;
    private Detail[]? stockprices;
    private Rating[]? ratings;
    private PriceHistory? forecasts;

    protected override async Task OnInitializedAsync()
    {
        reports = await Http.GetFromJsonAsync<Report[]>("discounted-cash-flow/" + ticker + "?limit=120&apikey=" + fmpApiKey.myApiKey);
        stockprices = await Http.GetFromJsonAsync<Detail[]>("quote/" + ticker + "?limit=120&apikey=" + fmpApiKey.myApiKey);
        profiles = await Http.GetFromJsonAsync<Profile[]>("profile/" + ticker + "?apikey=" + fmpApiKey.myApiKey);
        ratings = await Http.GetFromJsonAsync<Rating[]>("rating/" + ticker + "?apikey=" + fmpApiKey.myApiKey);
        forecasts = await Http.GetFromJsonAsync<PriceHistory>("historical-price-full/" + ticker + "?serietype=line&timeseries=" + timeseries + "&apikey=" + fmpApiKey.myApiKey);
    }

    public partial class PriceHistory : Historical
    {
        public string? Symbol { get; set; }
        public Historical[]? Historical { get; set; }

    }

    public class Historical
    {
        public string? date { get; set; }

        public double close { get; set; }
    }

    public class Profile
    {
        public double beta { get; set; }
        public string? companyName { get; set; }
        public string? currency { get; set; }
        public string? isin { get; set; }
        public string? exchange { get; set; }
        public string? exchangeShortName { get; set; }
        public string? industry { get; set; }
        public string? website { get; set; }
        public string? description { get; set; }
        public string? ceo { get; set; }
        public string? sector { get; set; }
        public string? country { get; set; }
        public string? fullTimeEmployees { get; set; }
        public string? phone { get; set; }
        public string? address { get; set; }
        public string? city { get; set; }
        public string? state { get; set; }
        public string? zip { get; set; }
        public string? image { get; set; }
        public string? ipoDate { get; set; }
        public bool isEtf { get; set; }
        public bool isActivelyTrading { get; set; }
        public string finalAddress => "Address: " + address + ", " + zip + " " + city + ", " + state + " " + country + ". Phone: " + phone;
    }

    public class Report
    {
        public DateTime Date { get; set; }
        public string? symbol { get; set; }
        public double dcf { get; set; }
    }

    public class Detail
    {
        public double price { get; set; }
        public double marketCap { get; set; }
        public double volume { get; set; }
        public string? exchange { get; set; }
        public double eps { get; set; }
        public double? pe { get; set; }
        public double sharesOutstanding { get; set; }
    }

    public class Rating
    {
        public DateTime date { get; set; }
        public int ratingScore { get; set; }
        public string? ratingRecommendation { get; set; }
    }

    private string StyleForNumber(double disCF, double stoPr)
    {
        if (disCF > stoPr) return "color:green";
        if (disCF < stoPr)  return "color:red";
        return "background:white";
    }
}
