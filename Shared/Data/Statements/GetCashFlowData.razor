@inject HttpClient Http
@inject ApiKey fmpApiKey

@if (statements == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="content-table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Reported Currency</th>
                <th>Net Income</th>
                <th>Free Cash Flow</th>
                <th>Link</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var statement in statements)
            {
                <tr>
                    <td>@statement.Date.ToShortDateString()</td>
                    <td>@statement.reportedCurrency</td>
                    <td>@statement.netIncome.ToString("c")</td>
                    <td>@statement.freeCashFlow.ToString("c")</td>
                    <td><a href="@statement.finalLink" class="nav-link">Final Link</a></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string? tickerName { get; set; }

    private Report[]? statements;

    protected override async Task OnInitializedAsync()
    {
        statements = await Http.GetFromJsonAsync<Report[]>("cash-flow-statement/" + tickerName + "?limit=120&apikey=" + fmpApiKey.myApiKey);
    }

    public class Report
    {
        public DateTime Date { get; set; }
        public string? symbol { get; set; }
        public string? reportedCurrency { get; set; }
        public string? cik { get; set; }
        public string? fillingDate { get; set; }
        public string? acceptedDate { get; set; }
        public string? calendarYear { get; set; }
        public string? period { get; set; }
        public double netIncome { get; set; }
        public double depreciationAndAmortization { get; set; }
        public double deferredIncomeTax { get; set; }
        public double stockBasedCompensation { get; set; }
        public double changeInWorkingCapital { get; set; }
        public double accountsReceivables { get; set; }
        public double inventory { get; set; }
        public double accountsPayables { get; set; }
        public double otherWorkingCapital { get; set; }
        public double otherNonCashItems { get; set; }
        public double netCashProvidedByOperatingActivities { get; set; }
        public double investmentsInPropertyPlantAndEquipment { get; set; }
        public double acquisitionsNet { get; set; }
        public double purchasesOfInvestments { get; set; }
        public double salesMaturitiesOfInvestments { get; set; }
        public double otherInvestingActivites { get; set; }
        public double netCashUsedForInvestingActivites { get; set; }
        public double debtRepayment { get; set; }
        public double commonStockIssued { get; set; }
        public double commonStockRepurchased { get; set; }
        public double dividendsPaid { get; set; }
        public double otherFinancingActivites { get; set; }
        public double netCashUsedProvidedByFinancingActivities { get; set; }
        public double effectOfForexChangesOnCash { get; set; }
        public double netChangeInCash { get; set; }
        public double cashAtEndOfPeriod { get; set; }
        public double cashAtBeginningOfPeriod { get; set; }
        public double operatingCashFlow { get; set; }
        public double capitalExpenditure { get; set; }
        public double freeCashFlow { get; set; }
        public string? link { get; set; }
        public string? finalLink { get; set; }
    }
}
